//go:build web
// +build web

package command

import (
	"fmt"
	"log"
	"net"
	"net/http"
	gourl "net/url"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"github.com/gorilla/mux"
	"github.com/gotracker/gotracker/internal/web"
	"github.com/spf13/cobra"
)

var (
	webUIPath     = "./internal/web/ui"
	webNoLaunchUI = false
)

func init() {
	if persistFlags := webCmd.PersistentFlags(); persistFlags != nil {
		persistFlags.StringVarP(&webUIPath, "ui-host-path", "U", webUIPath, "path to Web UI files")
		persistFlags.BoolVarP(&webNoLaunchUI, "no-launch-ui", "u", webNoLaunchUI, "disable web UI launch")
	}

	rootCmd.AddCommand(webCmd)
}

var (
	webCmd = &cobra.Command{
		Use:   "web",
		Short: "Open up a web-based user interface",
		Long:  `Opens up a web-based user interface.`,
		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			web.Enabled = true
			additionalRoutes = append(additionalRoutes, ActivateWebUI)
			if err := cmd.Parent().PersistentPreRunE(cmd, args); err != nil {
				return err
			}
			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			if !webNoLaunchUI {
				openBrowser(fmt.Sprintf("http://%s/ui", hostPortForBindAddress(webBindAddress)))
			}
			web.WaitForShutdown()
			return nil
		},
	}
)

// spaHandler implements the http.Handler interface, so we can use it
// to respond to HTTP requests. The path to the static directory and
// path to the index file within that static directory are used to
// serve the SPA in the given static directory.
type spaHandler struct {
	pathPrefix string
	staticPath string
	indexPath  string
}

// ServeHTTP inspects the URL path to locate a file within the static dir
// on the SPA handler. If a file is found, it will be served. If not, the
// file located at the index path on the SPA handler will be served. This
// is suitable behavior for serving an SPA (single page application).
func (h spaHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	// get the absolute path to prevent directory traversal
	path := strings.TrimPrefix(r.URL.Path, h.pathPrefix)
	if path != "" {
		var err error
		path, err = filepath.Abs(path)
		if err != nil {
			// if we failed to get the absolute path respond with a 400 bad request
			// and stop
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}

	staticPath, err := filepath.Abs(h.staticPath)
	if err != nil {
		// if we failed to get the absolute path respond with a 400 bad request
		// and stop
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// prepend the path with the path to the static directory
	path = filepath.Join(staticPath, path)

	// check whether a file exists at the given path
	stat, err := os.Stat(path)
	if stat != nil && !stat.IsDir() {
		http.ServeFile(w, r, path)
		return
	} else if (stat != nil && stat.IsDir()) || os.IsNotExist(err) {
		indexPath := filepath.Join(path, h.indexPath)
		// file does not exist, serve index.html
		http.ServeFile(w, r, indexPath)
		return
	} else if err != nil {
		// if we got an error (that wasn't that the file doesn't exist) stating the
		// file, return a 500 internal server error and stop
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// otherwise, use http.FileServer to serve the static dir
	http.FileServer(http.Dir(path)).ServeHTTP(w, r)
}

// browsers returns a list of commands to attempt for web visualization.
func browsers() []string {
	var cmds []string
	if userBrowser := os.Getenv("BROWSER"); userBrowser != "" {
		cmds = append(cmds, userBrowser)
	}
	switch runtime.GOOS {
	case "darwin":
		cmds = append(cmds, "/usr/bin/open")
	case "windows":
		cmds = append(cmds, "cmd /c start")
	default:
		// Commands opening browsers are prioritized over xdg-open, so browser()
		// command can be used on linux to open the .svg file generated by the -web
		// command (the .svg file includes embedded javascript so is best viewed in
		// a browser).
		cmds = append(cmds, []string{"chrome", "google-chrome", "chromium", "firefox", "sensible-browser"}...)
		if os.Getenv("DISPLAY") != "" {
			// xdg-open is only for use in a desktop environment.
			cmds = append(cmds, "xdg-open")
		}
	}
	return cmds
}

func openBrowser(url string) {
	// Construct URL.
	u, _ := gourl.Parse(url)

	// Give server a little time to get ready.
	time.Sleep(time.Millisecond * 500)

	for _, b := range browsers() {
		args := strings.Split(b, " ")
		if len(args) == 0 {
			continue
		}
		viewer := exec.Command(args[0], append(args[1:], u.String())...)
		viewer.Stderr = os.Stderr
		if err := viewer.Start(); err == nil {
			return
		}
	}
	// No visualizer succeeded, so just print URL.
	log.Println(u.String())
}

func hostPortForBindAddress(bindAddress string) string {
	conn, err := net.Dial("udp", bindAddress)
	if err != nil {
		return bindAddress
	}
	defer conn.Close()

	remoteAddr := conn.RemoteAddr().(*net.UDPAddr)

	return fmt.Sprintf("%v:%d", remoteAddr.IP, remoteAddr.Port)
}

func ActivateWebUI(router *mux.Router) error {
	if !web.Allowed() {
		return nil
	}

	spa := spaHandler{
		pathPrefix: "/ui",
		staticPath: webUIPath,
		indexPath:  "index.html",
	}

	router.PathPrefix(spa.pathPrefix).Handler(spa)

	return nil
}
